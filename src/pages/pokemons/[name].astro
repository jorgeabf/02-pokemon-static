---
import type { GetStaticPaths } from 'astro'
import MainLayout from '@layouts/MainLayout.astro'
import PokemonCard from '@components/PokemonCard.astro'
import { Icon } from 'astro-icon/components'

export const getStaticPaths = (async () => {
  const resp = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151')

  const { results } = (await resp.json()) as PokemonListResponse

  return results.map(({ name, url }) => ({
    params: {
      name: name
    },
    props: {
      url: url,
      name: name
    }
  }))
}) satisfies GetStaticPaths

const { name } = Astro.params
const { url } = Astro.props

const id = url.split('/').at(-2)

const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`
---

<MainLayout
  title={`#${id} ${name.toLocaleUpperCase()}`}
  description={`Información, Imágen y Sonido del Pokémon ${name.toLocaleUpperCase()}`}
  image={imageSrc}
>
  <aside class='-mt-20 mb-10 flex justify-between gap-2 w-full'>
    <button
      onclick='history.back()'
      class='btn'
      >Volver</button
    >
    <button
      id='btn-favorite'
      class='hover:animate-pulse'
      data-name={name}
      data-id={id}
    >
      <Icon
        name='heart-outline'
        data-outline
        size={48}
      />
      <Icon
        name='heart-full'
        data-full
        size={48}
        color='red'
        class='hidden'
      />
    </button>
  </aside>
  <PokemonCard
    name={name}
    url={url}
    isBig
  />
  <audio
    controls
    class='mt-4 mx-auto'
  >
    <source
      src={audioSrc}
      type='audio/ogg'
    />
    Your browser does not support the audio element.
  </audio>
</MainLayout>

<script>
  interface FavoritePokemon {
    id: number
    name: string
  }

  const handlePageLoad = () => {
    let favorites: FavoritePokemon[] = JSON.parse(
      localStorage.getItem('favorites') ?? '[]'
    )

    const btnFavorite = document.getElementById(
      'btn-favorite'
    ) as HTMLButtonElement

    if (!btnFavorite) return

    const name = btnFavorite.dataset.name ?? ''
    const id = btnFavorite.dataset.id ?? ''
    const isFavorite = favorites.some((fav) => fav.name === name)

    const heartOutline = btnFavorite.querySelector(
      '[data-outline]'
    ) as HTMLElement
    const heartFull = btnFavorite.querySelector('[data-full]') as HTMLElement

    if (isFavorite) {
      heartOutline.classList.add('hidden')
      heartFull.classList.remove('hidden')
    }

    const toggleFavorite = () => {
      const isFavorite = favorites.some((fav) => fav.name === name)

      if (isFavorite) {
        favorites = favorites.filter((fav) => fav.name !== name)
      } else {
        favorites.push({ id: +id, name })
      }

      localStorage.setItem('favorites', JSON.stringify(favorites))
    }

    btnFavorite.addEventListener('click', () => {
      heartOutline.classList.toggle('hidden')
      heartFull.classList.toggle('hidden')
      toggleFavorite()
    })
  }

  document.addEventListener('astro:page-load', handlePageLoad)
</script>
